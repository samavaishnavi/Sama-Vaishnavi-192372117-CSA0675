1.mim and max
algorithm:
Initialization: Initialize an empty list a with elements.
Function Call: Call the built-in max and min functions on the list a.
Return: The max function returns the maximum value in the list, and the min function returns the minimum value in the list.
Print: Print the maximum and minimum values.
code:
a = [1, 2, 3, 4, 5]
print(max(a))
print(min(a))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.MERGE SORT
ALGORITHM:
Base Case: If the length of the array is less than or equal to 1, return the array as it is already sorted.
Split: Split the array into two halves at the middle index.
Recursion: Recursively apply the merge sort algorithm to each half.
Merge: Merge the sorted halves into a single sorted array.
Comparison: Compare elements from the left and right halves and place the larger element in the correct position in the array.
Remaining Elements: If there are remaining elements in either half, append them to the array in the correct order.
Return: Return the sorted array.
CODE:
def mergeSort(array):
    if len(array) > 1:
        r = len(array)//2
        L = array[:r]
        M = array[r:]
        mergeSort(L)
        mergeSort(M)
        i = j = k = 0
        while i < len(L) and j < len(M):
            if L[i] < M[j]:
                array[k] = L[i]
                i += 1
            else:
                array[k] = M[j]
                j += 1
            k += 1
        while i < len(L):
            array[k] = L[i]
            i += 1
            k += 1
        while j < len(M):
            array[k] = M[j]
            j += 1
            k += 1
def printList(array):
    for i in range(len(array)):
        print(array[i], end=" ")
    print()
if _name_ == '_main_':
    array = [6, 5, 12, 10, 9, 1]
    mergeSort(array)
    print("Sorted array is: ")
    printList(array)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.QUICK SORT
ALGORITHM:
Base Case: If the array is empty or contains only one element, return the array as it is already sorted.
Partition: Choose a pivot element and partition the array into two parts: elements less than the pivot and elements greater than the pivot.
Recursion: Recursively apply the quick sort algorithm to the left and right subarrays.
Comparison: Compare elements from the left and right subarrays and place the larger element in the correct position in the array.
Return: Return the sorted array.
CODE:
def partition(array, low, high):
  pivot = array[high]
  i = low - 1
  for j in range(low, high):
    if array[j] <= pivot:
      i = i + 1
      (array[i], array[j]) = (array[j], array[i])
  (array[i + 1], array[high]) = (array[high], array[i + 1])
  return i + 1
def quickSort(array, low, high):
  if low < high:
    pi = partition(array, low, high)
    quickSort(array, low, pi - 1)
    quickSort(array, pi + 1, high)
data = [8, 7, 2, 1, 0, 9, 6]
print("Unsorted Array")
print(data)
size = len(data)
quickSort(data, 0, size - 1)
print('Sorted Array in Ascending Order:')
print(data)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.BINARY SEARCH
algorithm:
Initialize the low and high pointers to the start and end of the array, respectively.
Initialize the mid pointer to the middle of the array.
Repeat until Convergence:
Calculate the mid index using the formula mid = low + (high - low) // 2.
Compare the value at the mid index with the target value x.
If the value at mid is equal to x, return the mid index.
If the value at mid is less than x, update the low pointer to mid + 1.
If the value at mid is greater than x, update the high pointer to mid - 1.
Return Result:
If the low pointer exceeds the high pointer, the target value x is not found in the array.
Return -1 to indicate that the target value is not present in the array.
Main Function:
Call the binarySearch function with the array, target value, and the initial low and high pointers.
Check if the result is not -1, indicating that the target value is found.
If the result is not -1, print the index at which the target value is found.
If the result is -1, print that the target value is not found.
CODE:
def binarySearch(array, x, low, high):
    while low <= high:
        mid = low + (high - low)//2
        if array[mid] == x:
            return mid
        elif array[mid] < x:
            low = mid + 1
        else:
            high = mid - 1
    return -1
array = [3, 4, 5, 6, 7, 8, 9]
x = 4
result= binarySearch(array, x, 0, len(array)-1)
if result != -1:
    print("Element is present at index " + str(result))
else:
    print("Not found")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.STRASSENS MATRIX MULTIPLICATION
ALGORITHM:
Split: Split the input matrices into four submatrices each.
Recursion: Recursively calculate the products of the submatrices using the following formulas
Combine: Combine the submatrices to form the final result using the following formulas
Return: Return the final result.
CODE:
import numpy as np
def split(mat):
    r, c = mat.shape
    r2, c2 = r // 2, c // 2
    return mat[:r2, :c2], mat[:r2, c2:], mat[r2:, :c2], mat[r2:, c2:]
def strassen(x, y):
    if len(x) == 1:
        return x * y
    a, b, c, d = split(x)
    e, f, g, h = split(y)
    p1 = strassen(a, f - h)
    p2 = strassen(a + b, h)
    p3 = strassen(c + d, e)
    p4 = strassen(d, g - e)
    p5 = strassen(a + d, e + h)
    p6 = strassen(b - d, g + h)
    p7 = strassen(a - c, e + f)
    c11 = p5 + p4 - p2 + p6
    c12 = p1 + p2
    c21 = p3 + p4
    c22 = p1 + p5 - p3 - p7
    c = np.vstack((np.hstack((c11, c12)), np.hstack((c21, c22))))
    return c
mat1 = np.array([[1, 2], [3, 4]])
mat2 = np.array([[5, 6], [7, 8]])
result = strassen(mat1, mat2)
print(result)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.Karatsuba algorithm for multiplication
ALGORITHM:
Base Case: If either number is less than 10, simply multiply them.
Split Numbers: Split both numbers into two parts: the most significant part (a and c) and the least significant part (b and d).
Recursively Multiply: Recursively multiply a and c, b and d, and (a + b) and (c + d).
Combine Results: Combine the results of the recursive multiplications to get the final product.
CODE:
def karatsuba(x, y):
    if x < 10 or y < 10:
        return x * y
    n = max(len(str(x)), len(str(y)))
    n2 = n // 2
    a = x // 10 ** n2
    b = x % 10 ** n2
    c = y // 10 ** n2
    d = y % 10 ** n2
    ac = karatsuba(a, c)
    bd = karatsuba(b, d)
    ad_bc = karatsuba(a + b, c + d) - ac - bd
    return ac * 10 ** (2 * n2) + (ad_bc * 10 ** n2) + bd
print(karatsuba(123, 456))
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.Closest pair of points using divide and conquer
ALGORITHM:
Base Case: If there are three or fewer points, use the brute force approach to find the closest pair.
Divide: Divide the points into two halves along the x-axis.
Conquer: Recursively find the closest pair in each half.
Combine: Combine the results from the two halves and the points in the middle strip to find the overall closest pair.
Strip Search: Search for the closest pair in the middle strip by considering all pairs of points within a distance of the minimum distance found so far.
This algorithm reduces the time complexity of finding the closest pair of points from O(n^2) to O(n log n) by dividing the problem into smaller subproblems and combining the results efficiently.
CODE:
import math
def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0])*2 + (p1[1] - p2[1])*2)
def brute_force_closest_pair(points):
    min_distance = float('inf')
    closest_pair = None
    for i in range(len(points)):
        for j in range(i + 1, len(points)):
            dist = distance(points[i], points[j])
            if dist < min_distance:
                min_distance = dist
                closest_pair = (points[i], points[j])
    return closest_pair, min_distance
def closest_pair(points):
    points.sort(key=lambda x: x[0])
    return _closest_pair(points)
def _closest_pair(points):
    if len(points) <= 3:
        return brute_force_closest_pair(points)
    mid = len(points) // 2
    left_points = points[:mid]
    right_points = points[mid:]
    left_closest_pair, left_min_distance = _closest_pair(left_points)
    right_closest_pair, right_min_distance = _closest_pair(right_points)
    min_distance = min(left_min_distance, right_min_distance)
    strip = [point for point in points if mid - min_distance <= point[0] <= mid + min_distance]
    strip.sort(key=lambda x: x[1])
    for i in range(len(strip)):
        for j in range(i + 1, min(i + 7, len(strip))):
            dist = distance(strip[i], strip[j])
            if dist < min_distance:
                min_distance = dist
                closest_pair = (strip[i], strip[j])
    return closest_pair, min_distance
points = [(1, 1), (1, 2), (2, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]
closest_pair, min_distance = closest_pair(points)
print("Closest pair:", closest_pair)
print("Minimum distance:", min_distance)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8.MEDIAN OF MEADIENS
ALGORITHM
Select Pivot: Choose a pivot element using the median of medians algorithm.
Partition: Partition the array into three parts: elements less than the pivot, elements equal to the pivot, and elements greater than the pivot.
Recursively Select: Recursively select the kth smallest element from the appropriate partition.
The median of medians algorithm is used to select a pivot element that is likely to be close to the median of the array. 
This helps to reduce the time complexity of the quickselect algorithm from O(n^2) to O(n) on average.
CODE:
def select_pivot(arr):
    n = len(arr)
    if n <= 5:
        return arr[0]
    medians = [median(arr[i:i+5]) for i in range(0, n, 5)]
    return select_pivot(medians)
def median(arr):
    arr.sort()
    return arr[len(arr) // 2]
def partition(arr, pivot):
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return left + middle + right
def quickselect(arr, k):
    if len(arr) == 1:
        return arr[0]
    pivot = select_pivot(arr)
    arr = partition(arr, pivot)
    if k < len(arr):
        return quickselect(arr[:k], k)
    elif k >= len(arr):
        return quickselect(arr[k:], k - len(arr))
    else:
        return arr[k]
arr = [1, 3, 5, 2, 4, 6, 7, 8, 9]
k = 5
print("Median of medians:", quickselect(arr, k))
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.
ALGORITHM:
Generate Substrings: Generate all possible substrings of the given strings.
Initialize Dictionary: Initialize a dictionary to store the longest common suffixes.
Iterate Over Substrings: Iterate over all substrings of the given strings.
Check for Matches: Check if the substrings are the same.
Update Dictionary: If they are the same, update the dictionary with the longest common suffix.
Find Longest LCS: Iterate over the dictionary to find the longest common suffix.
Return LCS: Return the longest common suffix.
The meet in the middle technique is used to find the longest common suffix of two 
strings by generating all possible substrings and checking for matches. This approach has a time complexity of O(n^2 * m^2), where n and m are the lengths of the strings.
CODE:
def meet_in_middle(s1, s2):
    n = len(s1)
    m = len(s2)
    substrings1 = [s1[i: j] for i in range(n) for j in range(i + 1, n + 1)]
    substrings2 = [s2[i: j] for i in range(m) for j in range(i + 1, m + 1)]
    lcs_dict = {}
    for substring1 in substrings1:
        for substring2 in substrings2:
            if substring1 == substring2:
                if substring1 in lcs_dict:
                    lcs_dict[substring1].append((substring1, substring1))
                else:
                    lcs_dict[substring1] = [(substring1, substring1)]
    longest_lcs = ""
    for key in lcs_dict:
        for pair in lcs_dict[key]:
            if len(pair[0]) > len(longest_lcs):
                longest_lcs = pair[0]
    return longest_lcs
s1 = "banana"
s2 = "anana"
print("Longest common suffix:", meet_in_middle(s1, s2))
---------------------------------------------------------------------------------------------------------------------------------------------------------
