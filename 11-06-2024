1.MERGE TWO SORTED LISTS
Algorithm:
*Base Case: If either list is empty, return the other list.
*Compare Values: Compare the values of the current nodes in both lists.
*Merge: If the value in the first list is smaller, move to the next node in the first list. If the value in the second list is smaller, move to the next node in the second list.
*Recursion: Repeat steps 2 and 3 until one of the lists becomes empty.
*Return: Return the merged list.
CODE:
class ListNode:
    def _init_(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        if not list1:
            return list2
        if not list2:
            return list1

        if list1.val < list2.val:
            list1.next = self.mergeTwoLists(list1.next, list2)
            return list1
        else:
            list2.next = self.mergeTwoLists(list1, list2.next)
            return list2
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.MERGE K SORTED LIST
Algorithm:
*Create a Dummy Node: Create a dummy node to simplify the process of merging the lists.
*Create a Heap: Create a heap to store the smallest value from each list.
*Pop Values from Heap: Pop the smallest value from the heap and add it to the merged list.
*Update the Heap: Update the heap by pushing the next value from the same list.
*Repeat: Repeat steps 3 and 4 until the heap is empty.
*Return: Return the merged list.
CODE:
import heapq
class ListNode:
    def _init_(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        dummy = ListNode()
        current = dummy
        heap = []
        for i in range(len(lists)):
            if lists[i]:
                heapq.heappush(heap, (lists[i].val, i))
        while heap:
            val, i = heapq.heappop(heap)
            current.next = ListNode(val)
            current = current.next
            if lists[i].next:
                lists[i] = lists[i].next
                heapq.heappush(heap, (lists[i].val, i))
        return dummy.next
        --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  3.REMOVE DUPLICATES FROM SORTED LIST
  Algorithm:
*Check for Empty List: If the input list is empty, return 0.
*Initialize Pointer: Initialize a pointer i to the first element of the list.
*Iterate through List: Iterate through the list starting from the second element.
*Check for Duplicates: If the current element is different from the previous one, move the pointer i forward and update the value at i.
*Return: Return the position of the last uniq
  CODE:
  def removeDuplicates(nums):
    if len(nums) == 0:
        return 0
    i = 0
    for j in range(1, len(nums)):
        if nums[j] != nums[i]:
            i += 1
            nums[i] = nums[j]
    return i + 1
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.SEARCH ROATED SORT ARRAY
Algorithm:
*Check for Empty List: If the input list is empty, return -1.
*Initialize Pointers: Initialize two pointers, left and right, to the start and end of the list.
*Binary Search: Perform a binary search on the list.
*Check for Target: If the middle element is the target, return its index.
*Adjust Pointers: Adjust the pointers based on whether the left half or right half of the list is sorted.
*Repeat: Repeat steps 3-5 until the target is found or the pointers cross.
*Return: Return -1 if the target is not found.
CODE:
def search(nums, target):
    if not nums:
        return -1
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        if nums[left] <= nums[mid]:
            if nums[left] <= target < nums[mid]:
                right = mid - 1
            else:
                left = mid + 1
        else:
            if nums[mid] < target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
    return -1
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.FIND FIRST AND LAST POSITION OF ELEMENT IN ARRAY
Algorithm:
*Check for Empty List: If the input list is empty, return [-1, -1].
*Initialize Pointers: Initialize two pointers, left and right, to the start and end of the list.
*Binary Search: Perform a binary search on the list.
*Update Indices: If the middle element is the target, update the left_index and right_index variables.
*Adjust Pointers: Adjust the pointers based on whether the middle element is less than or greater than the target.
*Repeat: Repeat steps 3-5 until the target is found or the pointers cross.
*Return: Return the indices if the target is found; otherwise, return [-1, -1].
CODE:
def searchRange(nums, target):
    if not nums:
        return [-1, -1]
    left, right = 0, len(nums) - 1
    left_index = -1
    right_index = -1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            if left_index == -1:
                left_index = mid
            right_index = mid
            left += 1
            right -= 1
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    if left_index == -1:
        return [-1, -1]
    if right_index == -1:
        right_index = left_index
    return [left_index, right_index]
    ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.SORT COLOURS
Algorithm:
*Initialize Pointers: Initialize three pointers: low, mid, and high.
*low points to the start of the array
*mid points to the current element being processed
*high points to the end of the array
*Iterate through the Array: While mid is less than or equal to high:
*If the current element is 0:
*Swap it with the element at low
*Increment low and mid
*If the current element is 1:
*Increment mid
*If the current element is 2:
*Swap it with the element at high
*Decrement high
*Return: Return the sorted array.
CODE:
def sortColors(nums):
    low, mid, high = 0, 0, len(nums) - 1
    while mid <= high:
        if nums[mid] == 0:
            nums[low], nums[mid] = nums[mid], nums[low]
            low += 1
            mid += 1
        elif nums[mid] == 1:
            mid += 1
        else:
            nums[mid], nums[high] = nums[high], nums[mid]
            high -= 1
    return nums
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.REMOVE DUPLICATES FROM SORTED LIST
Algorithm:
*Check for Empty List: If the input list is empty, return None.
*Initialize Pointer: Initialize a pointer current to the head of the list.
*Iterate through List: While current and current.next exist:
*If current.val is equal to current.next.val, remove current.next from the list.
*If current.val is not equal to current.next.val, move current to current.next.
*Return: Return the modified list.
*This algorithm iterates through the list, checking for duplicate values. If a duplicate is found, it is removed from the list. 
*The algorithm ensures that the list remains sorted by only removing duplicates.
CODE:
class ListNode:
    def _init_(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head:
            return None
        current = head
        while current and current.next:
            if current.val == current.next.val:
                current.next = current.next.next
            else:
                current = current.next
        return head
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8.MERGE SORTED ARRAY
Algorithm:
*Initialize Pointers: Initialize three pointers: i, j, and k.
*i points to the last element of the merged part of nums1
*j points to the last element of nums2
*k points to the last element of the combined array
*Merge from the End: While i and j are greater than or equal to 0:
*Compare the elements at nums1[i] and nums2[j].
*Place the larger element at nums1[k].
*Decrement i, j, and k.
*Handle Remaining Elements: If there are any remaining elements in nums2:
*Place them at the beginning of nums1.
*Decrement j and k.
CODE:
def merge(nums1, m, nums2, n):
    i, j = m - 1, n - 1
    k = m + n - 1
    while i >= 0 and j >= 0:
        if nums1[i] > nums2[j]:
            nums1[k] = nums1[i]
            i -= 1
        else:
            nums1[k] = nums2[j]
            j -= 1
        k -= 1
    while j >= 0:
        nums1[k] = nums2[j]
        j -= 1
        k -= 1
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.CONVERT SORTED ARRAY INTO BINARY SEARCH TREE
Algorithm:
*Base Case: If the input array is empty, return None.
*Find Middle Element: Find the middle element of the array.
*Create Root Node: Create a new node with the middle element as the value.
*Recursively Create Left and Right Subtrees: Recursively create the left and right subtrees by calling the function on the left and right halves of the array.
*Return Root Node: Return the root node of the binary search tree.
CODE:
class TreeNode:
    def _init_(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def sortedArrayToBST(self, nums):
        if not nums:
            return None
        mid = len(nums) // 2
        root = TreeNode(nums[mid])
        root.left = self.sortedArrayToBST(nums[:mid])
        root.right = self.sortedArrayToBST(nums[mid+1:])
        return root
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10.INSERTION SHORT LIST
Algorithm:
*Create Dummy Node: Create a dummy node to simplify the process of inserting elements.
*Initialize Current Node: Initialize a pointer current to the head of the list.
*Iterate through List: While current exists:
*Find Insertion Point: Find the position where the current element should be inserted.
*Insert Element: Insert the current element at the found position.
*Move to Next Element: Move current to the next element.
*Return: Return the sorted list.
CODE:
class ListNode:
    def _init_(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        current = head
        while current:
            prev = dummy
            while prev.next and prev.next.val < current.val:
                prev = prev.next
            temp = current.next
            current.next = prev.next
            prev.next = current
            current = temp
        return dummy.next
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
