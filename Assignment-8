1.Height of Binary Tree After Subtree Removal Queries
ALGORITHM:
Define Height Function: Create a function height that calculates the height of a binary tree.
Define Remove Subtree Function: Create a function removeSubtree that removes the subtree rooted at a given node value from the binary tree.
Define Get Heights Function: Create a function getHeights that performs the following steps:
Iterate through the queries array.
For each query, call the removeSubtree function to remove the subtree rooted at the given node value.
Calculate the height of the modified tree using the height function.
Append the height to the heights array.
Return Heights: Return the heights array.
The time complexity of this solution is O(n * m), where n is the number of nodes in the binary tree and m is the number of queries. 
This is because we need to traverse the entire tree for each query to remove the subtree and calculate the height.
CODE:
class TreeNode:
    def _init_(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
def height(root):
    if not root:
        return 0
    return 1 + max(height(root.left), height(root.right))
def removeSubtree(root, val):
    if not root:
        return None
    if root.val == val:
        return None
    root.left = removeSubtree(root.left, val)
    root.right = removeSubtree(root.right, val)
    return root

def getHeights(root, queries):
    heights = []
    for query in queries:
        new_root = removeSubtree(root, query)
        heights.append(height(new_root))
    return heights
root = TreeNode(1)
root.left = TreeNode(3)
root.right = TreeNode(4)
root.left.left = TreeNode(2)
root.right.left = TreeNode(6)
root.right.right = TreeNode(5)
root.right.left.right = TreeNode(7)
queries = [4]
print(getHeights(root, queries)) 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Sort Array by Moving Items to Empty Space
ALGORITHM:
Count Operations: Initialize a variable operations to 0.
Iterate Through Array: Iterate through the array nums.
Check for Misplacement: For each element, check if it is not at its correct position (i.e., nums[i] != i).
Increment Operations: If the element is not at its correct position, increment operations by 1.
Return Operations: Return the total number of operations needed to sort the array.
The time complexity of this solution is O(n), where n is the size of the array.
CODE:
def min_operations(nums):
    n = len(nums)
    operations = 0
    for i in range(n):
        if nums[i] != i:
            operations += 1
    return operations
nums = [4, 2, 0, 3, 1]
print(min_operations(nums))
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.apply operation to an array
ALGORITHM:
Iterate Through Array: Iterate through the array nums from the first element to the second last element.
Check for Consecutive Elements: For each element, check if it is equal to the next element.
Apply Operation: If the elements are equal, multiply the current element by 2 and set the next element to 0.
Return Array: Return the modified array.
CODE:
def apply_operations(nums):
    n = len(nums)
    for i in range(n - 1):
        if nums[i] == nums[i + 1]:
            nums[i] *= 2
            nums[i + 1] = 0
    return nums
nums = [1, 2, 2, 1, 1, 0]
print(apply_operations(nums))  # Output: [1, 4, 2, 0, 0, 0]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Maximum SumofDistinct Subarrays With Length K
algorithm:
Check if Array Length is Less Than K: If the array length is less than k, return 0.
Initialize Max Sum: Initialize a variable max_sum to 0.
Iterate Through Array: Iterate through the array from the first element to the second last element.
Get Subarray: For each element, get the subarray of length k starting from that element.
Check for Distinct Elements: Check if all elements in the subarray are distinct.
Update Max Sum: If the subarray has distinct elements, update max_sum with the sum of the subarray.
Return Max Sum: Return the maximum sum of all subarrays with distinct elements.
The time complexity of this solution is O(n * k), where n is the size of the array and k is the length of the subarray.
code:
def max_sum_of_distinct_subarrays(nums, k):
    n = len(nums)
    if n < k:
        return 0
    max_sum = 0
    for i in range(n - k + 1):
        subarray = set(nums[i:i + k])
        if len(subarray) == k:
            max_sum = max(max_sum, sum(subarray))
    return max_sum
nums = [1, 5, 4, 2, 9, 9, 9]
k = 3
print(max_sum_of_distinct_subarrays(nums, k))
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.Total Cost to Hire K Workers
algorithm:
Sort Costs: Sort the costs array in ascending order.
Initialize Total Cost: Initialize a variable total_cost to 0.
Iterate Through Hiring Sessions: Iterate through the hiring sessions.
Choose Worker: In each session, choose the worker with the lowest cost from either the first candidates workers or the last candidates workers. Break the tie by the smallest index.
Update Total Cost: Update total_cost with the cost of the chosen worker.
Update Costs and Candidates: Update the costs array by removing the chosen worker and update candidates by decrementing it.
Return Total Cost: Return the total cost to hire exactly k workers.
The time complexity of this solution is O(n log n), where n is the size of the costs array.
code:
def total_cost_to_hire_workers(costs, k, candidates):
    n = len(costs)
    costs.sort()
    total_cost = 0
    for _ in range(k):
        if candidates > 0:
            total_cost += costs[0]
            costs = costs[1:]
            candidates -= 1
        else:
            total_cost += costs[-1]
            costs = costs[:-1]
    return total_cost
costs = [17, 12, 10, 2, 7, 2, 11, 20, 8]
k = 3
candidates = 4
print(total_cost_to_hire_workers(costs, k, candidates))
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.minimum total distance travelled
algorithm:
Sort Robots and Factories: Sort the robots and factories arrays in ascending order.
Initialize Min Distance: Initialize a variable min_distance to 0.
Iterate Through Robots: Iterate through the robots array.
Determine Distance: For each robot, determine the distance it needs to travel to reach the nearest factory.
Update Min Distance: Update min_distance with the total distance traveled by all robots.
Return Min Distance: Return the minimum total distance traveled by all robots.
The time complexity of this solution is O(n log n), where n is the size of the robots array.
code:
def min_total_distance_traveled(robots, factories):
    n = len(robots)
    m = len(factories)
    robots.sort()
    factories.sort()
    min_distance = 0
    for i in range(n):
        if i % 2 == 0:
            min_distance += abs(robots[i] - factories[0][0])
        else:
            min_distance += abs(robots[i] - factories[-1][0])
    return min_distance
robots = [0, 4, 6]
factories = [[2, 2], [6, 2]]
print(min_total_distance_traveled(robots, factories))
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.MinimumSubarraysinaValidSplit
algorithm:
Check for Edge Cases: Check if the array has less than 3 elements. If so, return 1 or -1 accordingly.
Check for Odd Length: If the array has an odd length, return -1.
Check for GCD of First and Last Elements: If the GCD of the first and last elements is greater than 1, return 1.
Check for GCD of First and Middle Elements: Iterate through the array and check if the GCD of the first element and the middle element is greater than 1. If so, return 2.
Return -1: If no valid split is found, return -1.
The time complexity of this solution is O(n), where n is the size of the array.
code:
from math import gcd
from functools import reduce
def min_subarrays(nums):
    n = len(nums)
    if n == 1:
        return 1
    if n == 2:
        return -1
    if n % 2 == 1:
        return -1
    if gcd(nums[0], nums[-1]) > 1:
        return 1
    for i in range(1, n // 2):
        if gcd(nums[0], nums[i]) > 1 and gcd(nums[-1], nums[i]) > 1:
            return 2
    return -1
nums = [2, 6, 3, 4, 3]
print(min_subarrays(nums)) 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8.NUMBER OF DISTINCT AVERAGES
ALGORITHM:
Initialization:
Check if the input list nums is empty. If it is, return 0.
Initialize an empty set averages to store the distinct averages.
Initialize two pointers, i and j, to the start and end of the list, respectively.
Main Loop:
While i is less than j:
Calculate the average of the numbers at indices i and j.
Add this average to the averages set.
Move i one step to the right and j one step to the left.
Return:
Return the size of the averages set, which represents the number of distinct averages.
CODE:
def distinctAverages(nums):
    if not nums:
        return 0
    nums.sort()
    averages = set()
    i, j = 0, len(nums) - 1
    while i < j:
        averages.add((nums[i] + nums[j]) / 2)
        i += 1
        j -= 1
    return len(averages)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.COUNT WAYS TO BUILD GOOD STRING
ALGORITHM:
Initialization:
Initialize a list dp of size high + 1 with all elements set to 0.
Set dp to 1, as there is one way to construct an empty string.
Dynamic Programming:
For each string length i from 1 to high:
If i is greater than or equal to low, calculate the number of ways to construct a good string of length i by considering two options:
Append '0' zero times: dp[i - 1] * (zero + 1).
Append '1' one time: dp[i - 1] * one.
Add these two options and take the result modulo 10**9 + 7.
If i is less than low, only consider the option to append '0' zero times: dp[i - 1] * (zero + 1).
Store the result in dp[i].
Return:
Calculate the sum of the elements in dp from low to high (inclusive) and return the result modulo 10**9 + 7.
CODE:
def countGoodStrings(low, high, zero, one):
    MOD = 10**9 + 7
    dp = [0] * (high + 1)
    dp[0] = 1
    for i in range(1, high + 1):
        if i >= low:
            dp[i] = (dp[i - 1] * (zero + 1) + dp[i - 1] * one) % MOD
        else:
            dp[i] = (dp[i - 1] * (zero + 1)) % MOD
    return sum(dp[low:high + 1]) % MOD
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
10.MOST PROFITABLE PATH IN TREE
ALGORITHM:
Initialize the Graph and Profit Array:
Create an adjacency list representation of the tree.
Initialize the profitAtNode array with the given amount values.
Assign Timestamps to Nodes:
Perform a depth-first search (DFS) from the node bob to assign timestamps to each node based on their distance from bob.
The timestamp for each node is the minimum timestamp of its children.
Calculate Profit for Each Node:
Perform a DFS from the root node (0) to calculate the maximum profit for Alice.
For each node, calculate the profit by adding the profit at the current node to the maximum profit of its children.
Update the maximum profit if the current profit is higher.
Return the Maximum Profit:
Return the maximum profit calculated in step 3.
CODE:
class Solution:
    def mostProfitablePath(self, edges, bob, amount):
        n = len(edges) + 1
        graph = [[] for _ in range(n)]
        profitAtNode = amount
        timeStamps = [n] * n
        maximumProfit = float('-inf')
        for edge in edges:
            graph[edge[0]].append(edge[1])
            graph[edge[1]].append(edge[0])
        def dfsAssignTimestamps(currentNode, parent, timestamp):
            if currentNode == 0:
                timeStamps[currentNode] = min(timeStamps[currentNode], timestamp)
                return True
            for nextNode in graph[currentNode]:
                if nextNode != parent and dfsAssignTimestamps(nextNode, currentNode, timestamp + 1):
                    return True
            return False
        def dfsCalculateProfit(currentNode, parent, timestamp, currentProfit):
            nonlocal maximumProfit
            if currentNode == 0:
                maximumProfit = max(maximumProfit, currentProfit)
                return
            for nextNode in graph[currentNode]:
                if nextNode != parent:
                    dfsCalculateProfit(nextNode, currentNode, timestamp + 1, currentProfit + profitAt
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
