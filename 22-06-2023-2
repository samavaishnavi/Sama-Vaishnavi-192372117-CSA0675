6-A.
ALGORITHM:
->Calculate the sum of the range: Calculate the sum of all numbers in the range from 0 to n, where n is the length of the input array. This sum can be calculated using the formula 𝑛(𝑛+1)2/2
->Calculate the sum of the array: Calculate the sum of all numbers in the input array.
->Find the missing number: Subtract the sum of the array from the sum of the range to find the missing number.
->Return the missing number: Return the missing number as the result.
->Handle edge cases: Ensure that the input array is not empty and contains distinct numbers in the range [0, n].
PROGRAAM:
def findMissingNumber(nums):
    n = len(nums)
    total_sum = n * (n + 1) // 2
    array_sum = sum(nums)
    return total_sum - array_sum

# Example usage:
nums = [3, 0, 1]
print(findMissingNumber(nums))  # Output: 2

********************************************************************************************************************************************************************************

6-B.
->Initialize a Variable: Initialize a variable count to 0 and candidate to the first element in the array.
->Iterate Through the Array: Iterate through the array. For each element, if count is 0, set candidate to the current element and set count to 1. If the current element is equal to candidate, increment count. Otherwise, decrement count.
->Check for Majority Element: After iterating through the array, check if candidate is the majority element. This can be done by counting the occurrences of candidate in the array. If it occurs more than ⌊𝑛/2⌋ times, return candidate.
->Return the Majority Element: If candidate is the majority element, return it. Otherwise, return an error or handle the case where there is no majority element.
->Handle Edge Cases: Handle edge cases where the array is empty or has only one element.
PROGRAM:
def majorityElement(nums):
    count = 0
    candidate = None

    for num in nums:
        if count == 0:
            candidate = num
            count = 1
        elif candidate == num:
            count += 1
        else:
            count -= 1

    return candidate

    ******************************************************************************************************************************************************************************
7-A.
ALGORITHM:
->Initialize the Result Matrix: Initialize a new matrix maxLocal of size (n - 2) x (n - 2) filled with zeros.
->Iterate Through the Grid: Iterate through each cell (i, j) in the grid, where i and j range from 1 to n - 1.
->Extract the 3x3 Submatrix: Extract the contiguous 3x3 submatrix centered at (i, j) from the grid.
->Find the Maximum Value: Find the maximum value within the 3x3 submatrix.
->Assign to maxLocal: Assign the maximum value to the corresponding cell in maxLocal.
PROGRAM:
def largestLocal(grid):
    n = len(grid)
    maxLocal = [[0] * (n - 2) for _ in range(n - 2)]

    for i in range(1, n - 1):
        for j in range(1, n - 1):
            submatrix = [grid[x][y] for x in range(i - 1, i + 2) for y in range(j - 1, j + 2)]
            maxLocal[i - 1][j - 1] = max(submatrix)

    return maxLocal

# Example Usage
grid = [[9, 9, 8, 1], [5, 6, 2, 6], [8, 2, 6, 4], [6, 2, 2, 2]]
print(largestLocal(grid))  # Output: [[9, 9], [8, 6]]


******************************************************************************************************************************************************************************

7-B.
ALGORITHM:
->Base Case: If the linked list is empty or has only one node, return the head.
->Find the Middle Node: Use the "slow" and "fast" pointer technique to find the middle node of the linked list.
->Split the List: Split the linked list into two halves by breaking the link at the middle node.
->Recursively Sort the Halves: Recursively sort the two halves of the linked list using the same algorithm.
->Merge the Sorted Halves: Merge the two sorted halves of the linked list using the standard merge algorithm.
PROGRAM:
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def sortList(head):
    if not head or not head.next:
        return head

    # Find the middle node
    slow = fast = head
    prev = None
    while fast and fast.next:
        prev = slow
        slow = slow.next
        fast = fast.next.next
    prev.next = None

    # Recursively sort the two halves
    left = sortList(head)
    right = sortList(slow)

    # Merge the two sorted halves
    return merge(left, right)

def merge(left, right):
    dummy = ListNode()
    curr = dummy

    while left and right:
        if left.val < right.val:
            curr.next = left
            left = left.next
        else:
            curr.next = right
            right = right.next
        curr = curr.next

    if left:
        curr.next = left
    if right:
        curr.next = right

    return dummy.next

****************************************************************************************************************************************************************************

8-A.
ALGORITHM:
->Initialize a Counter: Initialize a variable count to keep track of the number of strings in words that contain pref as a prefix.
->Iterate Through the Words: Iterate through each string in the words array.
->Check for Prefix: Check if the current string starts with the pref string. If it does, increment the count variable.
->Return the Count: After iterating through all the strings in words, return the count variable.
->Handle Edge Cases: Handle edge cases where words is an empty array or pref is an empty string.
PROGRAM:
def numOfStrings(words, pref):
    count = 0
    for word in words:
        if word.startswith(pref):
            count += 1
    return count

*****************************************************************************************************************************************************************************

8-B.
ALGORITHM:
->Create a Dictionary: Create a dictionary anagrams to store the anagrams. The keys will be the sorted strings and the values will be lists of anagrams.
->Iterate Through the Strings: Iterate through each string in the input array strs.
->Sort the String: Sort the characters in the string to create a key for the dictionary.
->Add to the List of Anagrams: Add the string to the list of anagrams for the corresponding key in the dictionary.
->Return the Values: Return the values of the dictionary, which are the lists of anagrams.
PROGRAM:
def groupAnagrams(strs):
    anagrams = {}
    for word in strs:
        sorted_word = "".join(sorted(word))
        if sorted_word in anagrams:
            anagrams[sorted_word].append(word)
        else:
            anagrams[sorted_word] = [word]
    return list(anagrams.values())

# Example Usage
strs = ["eat", "tea", "tan", "ate", "nat", "bat"]
print(groupAnagrams(strs))  # Output: [["bat"], ["nat", "tan"], ["ate", "eat", "tea"]]


****************************************************************************************************************************************************************************

9-A.
ALGORITHM:
->Identify the Rows and Columns with Zeros: Iterate through the matrix and identify the rows and columns that contain a zero.
->Store the Indices: Store the indices of the rows and columns that contain a zero in two separate sets, rows and cols.
->Set the Rows and Columns to Zero: Iterate through the matrix again and set the elements in the identified rows and columns to zero.
->Handle Edge Cases: If the matrix is empty or has only one row or one column, handle the edge cases accordingly.
->Return the Modified Matrix: Return the modified matrix.
PROGRAM:
def setZeroes(matrix):
    m, n = len(matrix), len(matrix[0])
    rows, cols = set(), set()

    # Identify the rows and columns with zeros
    for i in range(m):
        for j in range(n):
            if matrix[i][j] == 0:
                rows.add(i)
                cols.add(j)

    # Set the rows and columns to zero
    for i in range(m):
        for j in range(n):
            if i in rows or j in cols:
                matrix[i][j] = 0

    return matrix

# Example Usage
matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]
print(setZeroes(matrix))  # Output: [[1, 0, 1], [0, 0, 0], [1, 0, 1]]


*****************************************************************************************************************************************************************************

9-B.
ALGORITHM:
->You are given two 0-indexed arrays nums1 and nums2 of length n, both of which are 
permutations of [0, 1, ..., n - 1].
 ->A good triplet is a set of 3 distinct values which are present in increasing order by position 
 both in nums1 and nums2. In other words, if we consider pos1v as the index of the value v in nums1 and pos2v as the index of the value v in nums2, then a good triplet will be a set (x, y, z) where 0 <= x, y, z <= n - 1, such that pos1x < pos1y < pos1z and pos2x < pos2y < pos2z. 
->Return the total number of good triplets.
 Example 1:
 Input: nums1 = [2,0,1,3], nums2 = [0,1,2,3]
 Output: 1
 Explanation: 
->There are 4 triplets (x,y,z) such that pos1x < pos1y < pos1z. They are (2,0,1), (2,0,3), (2,1,3), 
and (0,1,3). 
->Out of those triplets, only the triplet (0,1,3) satisfies pos2x < pos2y < pos2z. Hence, there is 
only 1 good triplet.
PROGRAM:
def setZeroes(matrix):
    m, n = len(matrix), len(matrix[0])
    rows, cols = set(), set()

    # Identify the rows and columns with zeros
    for i in range(m):
        for j in range(n):
            if matrix[i][j] == 0:
                rows.add(i)
                cols.add(j)

    # Set the rows and columns to zero
    for i in range(m):
        for j in range(n):
            if i in rows or j in cols:
                matrix[i][j] = 0

    return matrix

# Example Usage
matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]
print(setZeroes(matrix))  # Output: [[1, 0, 1], [0, 0, 0], [1, 0, 1]]


****************************************************************************************************************************************************************************

10-B.
ALGORITHM:
->Convert the Arrays to Sets: Convert the input arrays nums1 and nums2 to sets set1 and set2, respectively. This will remove any duplicate elements.
->Find the Intersection: Find the intersection of the two sets using the & operator. This will give us the elements that are common to both sets.
->Convert the Intersection to a List: Convert the intersection set to a list.
->Return the List: Return the list of unique intersection elements.
->Handle Edge Cases: If either nums1 or nums2 is empty, return an empty list.
PROGRAM:
def intersection(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)
    return list(set1 & set2)

# Example Usage
nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
print(intersection(nums1, nums2))  # Output: [2]

nums1 = [4, 9, 5]
nums2 = [9, 4, 9, 8, 4]
print(intersection(nums1, nums2))  # Output: [4, 9]


*****************************************************************************************************************************************************************************

10-B.
ALGORITHM:
->Initialize a Heap: Initialize a max heap to store the k largest elements.
->Push Elements into the Heap: Iterate through the array and push each element into the heap. If the heap size exceeds k, pop the smallest element from the heap.
->Return the Top of the Heap: After pushing all elements into the heap, return the top element of the heap, which is the kth largest element.
->Handle Edge Cases: If the array is empty or k is larger than the array size, handle the edge cases accordingly.
->Return the Result: Return the kth largest element.
PROGRAM:
import heapq

def findKthLargest(nums, k):
    # Initialize a max heap
    heap = []
    for num in nums:
        # Push elements into the heap
        if len(heap) < k:
            heapq.heappush(heap, num)
        else:
            if num > heap[0]:
                heapq.heappop(heap)
                heapq.heappush(heap, num)
    # Return the top of the heap
    return heapq.heappop(heap)

# Example Usage
nums = [3, 2, 1, 5, 6, 4]
k = 2
print(findKthLargest(nums, k))  # Output: 5

nums = [3, 2, 3, 1, 2, 4, 5, 5, 6]
k = 4
print(findKthLargest(nums, k))  # Output: 4

