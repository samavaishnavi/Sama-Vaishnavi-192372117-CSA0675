1.	Write a program to Print Fibonacci Series using recursion.

def fibonacci(n):
    if n <= 0:
        return "Input should be a positive integer."
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

n = int(input("Enter the number of terms: "))
for i in range(1, n+1):
    print(fibonacci(i))


2.	Write a program to check the given no is Armstrong or not using recursive function.

def is_armstrong(num, original_num):
    if num == 0:
        return 0
    return (num % 10) ** len(str(original_num)) + is_armstrong(num // 10, original_num)

num = int(input("Enter a number: "))
original_num = num
result = is_armstrong(num, original_num)

if result == num:
    print(f"{num} is an Armstrong number.")
else:
    print(f"{num} is not an Armstrong number.")


3.	Write a program to find the GCD of two numbers using recursive factorization

def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)

num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))

print(f"The GCD of {num1} and {num2} is {gcd(num1, num2)}")


4.         Write a program to get the largest element of an array.

def find_largest(arr):
    return max(arr)

# Example usage
arr = [12, 45, 7, 23, 56, 89, 34]
print(f"The largest element in the array is {find_largest(arr)}")


5.          Write a program to find the Factorial of a number using recursion.

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

num = int(input("Enter a number: "))
print(f"The factorial of {num} is {factorial(num)}")


6.         Write a program for to copy one string to another  using recursion

def copy_string(str1, str2, index):
    if index >= len(str1):
        return str2
    else:
        str2 += str1[index]
        return copy_string(str1, str2, index + 1)

str1 = input("Enter the first string: ")
str2 = ""

print(f"The copied string is: {copy_string(str1, str2, 0)}")


7. Write a program   to print the reverse of a string using recursion

def reverse_string(str):
    if len(str) == 0:
        return str
    else:
        return reverse_string(str[1:]) + str[0]

str = input("Enter a string: ")
print(f"The reverse of the string is: {reverse_string(str)}")


8. Write a program   to generate all the prime numbers using recursion

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def generate_primes(n):
    if n <= 1:
        return []
    elif n <= 3:
        return [2, 3]
    else:
        primes = generate_primes(n - 1)
        if is_prime(n):
            primes.append(n)
        return primes

n = int(input("Enter the number of prime numbers to generate: "))
print(f"The first {n} prime numbers are: {generate_primes(n)}")


9. Write a program to check a number is a prime number or not using recursion.

def is_prime(n, i=2):
    if n <= 2:
        return n == 2
    if n % i == 0:
        return False
    if i * i > n:
        return True
    return is_prime(n, i + 1)

num = int(input("Enter a number: "))

if is_prime(num):
    print(f"{num} is a prime number.")
else:
    print(f"{num} is not a prime number.")


10.Write a program for to check whether a given String is Palindrome or  not using recursion

def is_palindrome(s):
    if len(s) <= 1:
        return True
    else:
        if s[0] == s[-1]:
            return is_palindrome(s[1:-1])
        else:
            return False

s = input("Enter a string: ")
if is_palindrome(s):
    print(f"{s} is a palindrome.")
else:
    print(f"{s} is not a palindrome.")





